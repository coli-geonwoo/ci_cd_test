# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: assign grant gradlew
        run: chmod +x gradlew

      - name: bootJar with gradle
        run: ./gradlew bootJar


  deploy:
    needs: build
    runs-on: [ self-hosted, linus, ARM64 ]
    env:
      CONTAINER_NAME:
    #pull rm-f run
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build And Push docker image
        run: docker build --platform linux/arm64/v8 --push --tag ${{ secrets.DOCKER_DEV_TAG }} .
        # m1기반 맥북은 arm64기반 이미지 생성 -> ubuntu20.04는 amd64 기반 프로세서 사용

      - name: Pull docker
        run : docker pull docker pull ${{ secrets.DOCKER_USERNAME }}/my-ubuntu:latest

      - name: kill 80 port if exist
        run: |
          if sudo lsof -i :80; then
          echo "Port 80 is already in use. Killing the process..."
          sudo lsof -i :80 | awk 'NR!=1 {print $2}' | sudo xargs kill -9
          fi

      - name: Run Docker
        run: |
          docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/my-ubuntu:latest
#      - name: run application use ssh
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.DEV_IP }} # 호스트
#          username: ${{ secrets.DEV_USERNAME }} # 유저명 -> ubuntu
#          key: ${{secrets.DEV_SSH_KEY}} # ssh private 키
#          script_stop: true
#          script: ${{ vars.DEV_DEPLOY_COMMAND }}