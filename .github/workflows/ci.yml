# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: assign grant gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew build

#      - name: Publish Unit Test Results
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        if: ${{ always() }}
#        with:
#          files: ./build/test-results/**/*.xml

      - name: When test fail, comment on that code
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: ./build/test-results/**/*.xml
          token: ${{ github.token }}

      - name: bootJar with gradle
        run: ./gradlew bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build And Push docker image
        run: docker build --platform linux/arm64/v8 --push --tag ${{ secrets.DOCKER_DEV_TAG }} .


  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Pull Latest Docker Image
        run: |
            sudo docker login --username ${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.PASSWORD }}
            if sudo docker inspect demo-app-container &>/dev/null; then
            sudo docker stop demo-app-container
            sudo docker rm -f demo-app-container
            sudo docker image prune -af
            fi
            sudo docker pull brocoli1021/demo-app:latest

      - name: Run Container
        run: |
            sudo docker run --name demo-app-container -p 8080:8080 brocoli1021/demo-app:latest 1>> build.log 2>> error.log &

